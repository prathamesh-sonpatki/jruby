/*
  Translation of JRuby Grammar into Beaver grammar

formal_parameter = type.t variable_declarator_id*/

formal_parameter = type.t variable_declarator_id%package "org.jruby.parser";

formal_parameter = type.t variable_declarator_id%import "java.io.InputStream";
formal_parameter = type.t variable_declarator_id%import "java.io.IOException";
formal_parameter = type.t variable_declarator_id%import "java.util.ArrayList";
formal_parameter = type.t variable_declarator_id%import "java.util.List";

formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.Annotation";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.AnnotationExpression";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.AnnotationParameter";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.ArrayAnnotationExpression";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.ArrayTypeNode";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.CharacterLiteral";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.ConstructorSignatureNode";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.DefaultAnnotationParameter";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.MethodSignatureNode";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.Literal";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.Modifier";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.ParameterNode";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.PrimitiveTypeNode";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.ReferenceTypeNode";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.SignatureNode";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.StringLiteral";
formal_parameter = type.t variable_declarator_id%import "org.jruby.ast.java_signature.TypeNode";
formal_parameter = type.t variable_declarator_id%import "org.jruby.lexer.JavaSignatureLexer";

formal_parameter = type.t variable_declarator_id%class "JavaSignatureBeaverParser";

formal_parameter = type.t variable_declarator_id%embed {:
formal_parameter = type.t variable_declarator_id    
formal_parameter = type.t variable_declarator_id    /*   private static JavaSignatureBeaverParser parser = new JavaSignatureBeaverParser();

formal_parameter = type.t variable_declarator_id        public static SignatureNode parse(InputStream in) throws IOException, ParserSyntaxException {
formal_parameter = type.t variable_declarator_id            return (SignatureNode) parser.nextToken(JavaSignatureLexer.create(in));
formal_parameter = type.t variable_declarator_id        }
formal_parameter = type.t variable_declarator_id    */
formal_parameter = type.t variable_declarator_id        :};

formal_parameter = type.t variable_declarator_id%terminals  BOOLEAN, BYTE, SHORT, INT, LONG, CHAR, FLOAT, DOUBLE, VOID, // primitive types 
formal_parameter = type.t variable_declarator_id     PUBLIC, PRIVATE, PROTECTED, STATIC, ABSTRACT, FINAL, NATIVE, SYNCHRONIZED, TRANSIENT, VOLATILE, STRICTFP, //modifiers
formal_parameter = type.t variable_declarator_id     IDENTIFIER, //identifier
formal_parameter = type.t variable_declarator_id     AND, AT, DOT, COMMA, ELLIPSIS, EQUAL, LCURLY, RCURLY, LPAREN, RPAREN, LBRACK, RBRACK, QUESTION, LT, GT, THROWS, EXTENDS, SUPER,  RSHIFT, URSHIFT, CHARACTER_LITERAL, STRING_LITERAL // syntax markers
formal_parameter = type.t variable_declarator_id     ;
formal_parameter = type.t variable_declarator_id%typeof BOOLEAN, BYTE, SHORT, INT, LONG, CHAR, FLOAT, DOUBLE, VOID, PUBLIC, PROTECTED, PRIVATE, STATIC, ABSTRACT, FINAL, NATIVE, SYNCHRONIZED, TRANSIENT, VOLATILE, STRICTFP, IDENTIFIER, AND , AT, DOT, COMMA, ELLIPSIS, EQUAL, LCURLY, RCURLY, LPAREN, RPAREN, LBRACK, RBRACK, QUESTION, LT, GT, THROWS, EXTENDS,  SUPER, RSHIFT,URSHIFT, CHARACTER_LITERAL, STRING_LITERAL = "String";

formal_parameter = type.t variable_declarator_id%typeof method_declarator, method_header = "MethodSignatureNode";
formal_parameter = type.t variable_declarator_id%typeof constructor_declarator, constructor_declaration = "ConstructorSignatureNode";
formal_parameter = type.t variable_declarator_id%typeof formal_parameter_list_opt, formal_parameter_list = "List"; // <ParameterNode>
formal_parameter = type.t variable_declarator_id%typeof modifiers_opt, modifiers, modifiers_none, throws, class_type_list = "List";
formal_parameter = type.t variable_declarator_id%typeof annotation_params_opt, annotation_params, annotation_params_none = "List";
formal_parameter = type.t variable_declarator_id%typeof formal_parameter = "ParameterNode";
formal_parameter = type.t variable_declarator_id%typeof primitive_type, type = "TypeNode";
formal_parameter = type.t variable_declarator_id%typeof class_or_interface, class_or_interface_type, array_type = "ReferenceTypeNode";
formal_parameter = type.t variable_declarator_id%typeof  interface_type, class_type, reference_type = "ReferenceTypeNode";
formal_parameter = type.t variable_declarator_id%typeof  name, type_variable, variable_declarator_id = "String";
formal_parameter = type.t variable_declarator_id%typeof  type_bound_1, additional_bound, additional_bound_list_1 = "String";
formal_parameter = type.t variable_declarator_id%typeof wildcard, type_argument, type_argument_list = "String";
formal_parameter = type.t variable_declarator_id%typeof  type_argument_1, type_argument_2, type_argument_3= "String";
formal_parameter = type.t variable_declarator_id%typeof  wildcard_1, wildcard_2, wildcard_3 = "String";
formal_parameter = type.t variable_declarator_id%typeof  reference_type_1, reference_type_2, reference_type_3= "String";
formal_parameter = type.t variable_declarator_id%typeof  type_argument_list_1, type_argument_list_2, type_argument_list_3= "String";
formal_parameter = type.t variable_declarator_id%typeof  type_parameter, type_parameter_1= "String";
formal_parameter = type.t variable_declarator_id%typeof  type_parameter_list, type_parameter_list_1 = "String"; 
formal_parameter = type.t variable_declarator_id%typeof  type_bound_opt, type_bound, additional_bound_list, additional_bound_list_opt= "String";
formal_parameter = type.t variable_declarator_id%typeof  annotation_name= "String";
formal_parameter = type.t variable_declarator_id%typeof  modifier = "Object";  // Can be either modifier enum or Annotation instance
formal_parameter = type.t variable_declarator_id%typeof  dims = "ArrayTypeNode";
formal_parameter = type.t variable_declarator_id%typeof  none = "Object";
formal_parameter = type.t variable_declarator_id%typeof  program = "SignatureNode";
formal_parameter = type.t variable_declarator_id%typeof  annotation = "Annotation";
formal_parameter = type.t variable_declarator_id%typeof  annotation_param = "AnnotationParameter";
formal_parameter = type.t variable_declarator_id%typeof  annotation_value = "AnnotationExpression";
formal_parameter = type.t variable_declarator_id%typeof  annotation_array_values = "List";
formal_parameter = type.t variable_declarator_id%typeof  literal = "Literal";

formal_parameter = type.t variable_declarator_id%goal program;

formal_parameter = type.t variable_declarator_idprogram = method_header.m {:
formal_parameter = type.t variable_declarator_id                         return new SignatureNode(m);
formal_parameter = type.t variable_declarator_id                         //$$ = $1;
formal_parameter = type.t variable_declarator_id                        :}
formal_parameter = type.t variable_declarator_id        | constructor_declaration {:
formal_parameter = type.t variable_declarator_id                                   return new SignatureNode(m);
formal_parameter = type.t variable_declarator_id                                   // $$ = $1;
formal_parameter = type.t variable_declarator_id                                   :}
formal_parameter = type.t variable_declarator_id    ;


formal_parameter = type.t variable_declarator_idtype = primitive_type | reference_type.r {:
formal_parameter = type.t variable_declarator_id                                          return new TypeNode((TypeNode)r);
formal_parameter = type.t variable_declarator_id                                          //$$ = $<TypeNode>1;
formal_parameter = type.t variable_declarator_id                                          :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// PrimitiveTypeNode
formal_parameter = type.t variable_declarator_idprimitive_type =
formal_parameter = type.t variable_declarator_id      BYTE {:
formal_parameter = type.t variable_declarator_id        return PrimitiveTypeNode.BYTE;
formal_parameter = type.t variable_declarator_id        //$$ = PrimitiveTypeNode.BYTE;
formal_parameter = type.t variable_declarator_id           :}
formal_parameter = type.t variable_declarator_id    | SHORT {:
formal_parameter = type.t variable_declarator_id        return PrimitiveTypeNode.SHORT;
formal_parameter = type.t variable_declarator_id        //$$ = PrimitiveTypeNode.SHORT;
formal_parameter = type.t variable_declarator_id        :}
formal_parameter = type.t variable_declarator_id    | INT {:
formal_parameter = type.t variable_declarator_id        return PrimitiveTypeNode.INT;
formal_parameter = type.t variable_declarator_id        //$$ = PrimitiveTypeNode.INT;
formal_parameter = type.t variable_declarator_id        :}
formal_parameter = type.t variable_declarator_id    | LONG {:
formal_parameter = type.t variable_declarator_id        return PrimitiveTypeNode.LONG;
formal_parameter = type.t variable_declarator_id        //$$ = PrimitiveTypeNode.LONG;
formal_parameter = type.t variable_declarator_id        :}
formal_parameter = type.t variable_declarator_id    | CHAR {:
formal_parameter = type.t variable_declarator_id        return PrimitiveTypeNode.CHAR;
formal_parameter = type.t variable_declarator_id        //$$ = PrimitiveTypeNode.CHAR;
formal_parameter = type.t variable_declarator_id        :}
formal_parameter = type.t variable_declarator_id    | BOOLEAN {:
formal_parameter = type.t variable_declarator_id        return PrimitiveTypeNode.BOOLEAN;
formal_parameter = type.t variable_declarator_id        //$$ = PrimitiveTypeNode.BOOLEAN;
formal_parameter = type.t variable_declarator_id        :} 
formal_parameter = type.t variable_declarator_id    | FLOAT {:
formal_parameter = type.t variable_declarator_id        return PrimitiveTypeNode.FLOAT;
formal_parameter = type.t variable_declarator_id        //$$ = PrimitiveTypeNode.FLOAT;
formal_parameter = type.t variable_declarator_id        :}
formal_parameter = type.t variable_declarator_id    | DOUBLE {:
formal_parameter = type.t variable_declarator_id        return PrimitiveTypeNode.DOUBLE;
formal_parameter = type.t variable_declarator_id        //$$ = PrimitiveTypeNode.DOUBLE;
formal_parameter = type.t variable_declarator_id        :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// ReferenceTypeNode
formal_parameter = type.t variable_declarator_idreference_type = class_or_interface_type.c {:
formal_parameter = type.t variable_declarator_id                                            return new ReferenceTypeNode(c);
formal_parameter = type.t variable_declarator_id                                            // $$ = $1;
formal_parameter = type.t variable_declarator_id                                          :}
formal_parameter = type.t variable_declarator_id | array_type.a {:
formal_parameter = type.t variable_declarator_id                  return new ReferenceTypeNode((ReferenceTypeNode)r);
formal_parameter = type.t variable_declarator_id                  //$$ = $<ReferenceTypeNode>1;
formal_parameter = type.t variable_declarator_id                :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_variable = IDENTIFIER.id {: 
formal_parameter = type.t variable_declarator_id                               return new String(id);
formal_parameter = type.t variable_declarator_id                               // $$ = $1; 
formal_parameter = type.t variable_declarator_id                              :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// ReferenceTypeNode
formal_parameter = type.t variable_declarator_idclass_or_interface = name.n {:
formal_parameter = type.t variable_declarator_id                             return new ReferenceTypeNode(n);
formal_parameter = type.t variable_declarator_id                             // $$ = new ReferenceTypeNode($1);
formal_parameter = type.t variable_declarator_id                            :}
formal_parameter = type.t variable_declarator_id | class_or_interface.c LT type_argument_list_1.t DOT name.n {:
formal_parameter = type.t variable_declarator_id     String genericTyping = "<" + t + "." + n;
formal_parameter = type.t variable_declarator_id     //String genericTyping = "<" + $3 + "." + $5;
formal_parameter = type.t variable_declarator_id     ReferenceType result = c;
formal_parameter = type.t variable_declarator_id     //$$ = $1;
formal_parameter = type.t variable_declarator_id     c.setGenericsTyping(genericTyping);
formal_parameter = type.t variable_declarator_id     //$1.setGenericsTyping(genericTyping);
formal_parameter = type.t variable_declarator_id     return result;
formal_parameter = type.t variable_declarator_id     :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// ReferenceTypeNode
formal_parameter = type.t variable_declarator_idclass_or_interface_type = class_or_interface
formal_parameter = type.t variable_declarator_id | class_or_interface.c LT type_argument_list_1.l {:
formal_parameter = type.t variable_declarator_id                                               String genericTyping = "<" + l;
formal_parameter = type.t variable_declarator_id                                               //String genericTyping = "<" + $3;
formal_parameter = type.t variable_declarator_id                                               ReferenceTypeNode result = c;  
formal_parameter = type.t variable_declarator_id                                               //$$ = $1;
formal_parameter = type.t variable_declarator_id                                               c.setGenericsTyping(genericTyping);
formal_parameter = type.t variable_declarator_id                                               //$1.setGenericsTyping(genericTyping);
formal_parameter = type.t variable_declarator_id                                               return result;
formal_parameter = type.t variable_declarator_id                                                   :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// ReferenceTypeNode
formal_parameter = type.t variable_declarator_idclass_type = class_or_interface_type
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// ReferenceTypeNode
formal_parameter = type.t variable_declarator_idinterface_type = class_or_interface_type
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// ReferenceTypeNode
formal_parameter = type.t variable_declarator_idarray_type = primitive_type.t dims.d {:
formal_parameter = type.t variable_declarator_id                                    d.setTypeForArray(t);
formal_parameter = type.t variable_declarator_id                                    //$2.setTypeForArray($1);
formal_parameter = type.t variable_declarator_id                                      return d;
formal_parameter = type.t variable_declarator_id                                    //$$ = $2;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id | name.n dims.d {:
formal_parameter = type.t variable_declarator_id     d.setTypeOfArray(new ReferenceTypeNode(n));
formal_parameter = type.t variable_declarator_id     //$2.setTypeForArray(new ReferenceTypeNode($1));
formal_parameter = type.t variable_declarator_id     return d;
formal_parameter = type.t variable_declarator_id     //$$ = $2;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id | class_or_interface.c LT type_argument_list_1.t DOT name.n dims.d {:
formal_parameter = type.t variable_declarator_id     c.setGenericsTyping("<" + t + "." + n);
formal_parameter = type.t variable_declarator_id     //$1.setGenericsTyping("<" + $3 + "." + $5);
formal_parameter = type.t variable_declarator_id     d.setTypeForArray(c);
formal_parameter = type.t variable_declarator_id     //$6.setTypeForArray($1);
formal_parameter = type.t variable_declarator_id     return d;
formal_parameter = type.t variable_declarator_id     //$$ = $6;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id | class_or_interface.c LT type_argument_list_1.t dims.d {:
formal_parameter = type.t variable_declarator_id     c.setGenericsTyping("<" + t);
formal_parameter = type.t variable_declarator_id     //$1.setGenericsTyping("<" + $3);
formal_parameter = type.t variable_declarator_id     d.setTypeForArray(c);
formal_parameter = type.t variable_declarator_id     //$4.setTypeForArray($1);
formal_parameter = type.t variable_declarator_id     return d;
formal_parameter = type.t variable_declarator_id     //$$ = $4;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idwildcard = QUESTION {: 
formal_parameter = type.t variable_declarator_id                     return "?";
formal_parameter = type.t variable_declarator_id                     //$$ = "?";
formal_parameter = type.t variable_declarator_id :} | QUESTION EXTENDS reference_type.t {:
formal_parameter = type.t variable_declarator_id     return "? extends " + t.getFullyTypedName();
formal_parameter = type.t variable_declarator_id     //$$ = "? extends " + $3.getFullyTypedName();
formal_parameter = type.t variable_declarator_id :} | QUESTION SUPER reference_type.t {: 
formal_parameter = type.t variable_declarator_id     return "? super " +  t.getFullyTypedName();
formal_parameter = type.t variable_declarator_id     //$$ = "? super " + $3.getFullyTypedName();
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idwildcard_1 = QUESTION GT {:
formal_parameter = type.t variable_declarator_id                          return "?>";
formal_parameter = type.t variable_declarator_id                          //$$ = "?>"; 
formal_parameter = type.t variable_declarator_id :} | QUESTION EXTENDS reference_type_1.t {:
formal_parameter = type.t variable_declarator_id     return "? extends " + t;
formal_parameter = type.t variable_declarator_id     //$$ = "? extends " + $3;
formal_parameter = type.t variable_declarator_id :} | QUESTION SUPER reference_type_1.t {: 
formal_parameter = type.t variable_declarator_id     return "? super " + t ;
formal_parameter = type.t variable_declarator_id     //$$ = "? super " + $3;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idwildcard_2 = QUESTION RSHIFT {: 
formal_parameter = type.t variable_declarator_id                              return "?>>";
formal_parameter = type.t variable_declarator_id                              //$$ = "?>>"; 
formal_parameter = type.t variable_declarator_id :} | QUESTION EXTENDS reference_type_2.t {: 
formal_parameter = type.t variable_declarator_id     return "? extends " + t;
formal_parameter = type.t variable_declarator_id     //$$ = "? extends " + $3;
formal_parameter = type.t variable_declarator_id :} | QUESTION SUPER reference_type_2.t {: 
formal_parameter = type.t variable_declarator_id     return "? super " + t;
formal_parameter = type.t variable_declarator_id     //$$ = "? super " + $3;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idwildcard_3 = QUESTION URSHIFT {:
formal_parameter = type.t variable_declarator_id                               return "?>>";
formal_parameter = type.t variable_declarator_id                               //$$ = "?>>";
formal_parameter = type.t variable_declarator_id :} | QUESTION EXTENDS reference_type_3.t {:
formal_parameter = type.t variable_declarator_id     return "? extends " + t;
formal_parameter = type.t variable_declarator_id     //$$ = "? extends " + $3;
formal_parameter = type.t variable_declarator_id :} | QUESTION SUPER reference_type_3.t {:
formal_parameter = type.t variable_declarator_id     return "? super " + t;
formal_parameter = type.t variable_declarator_id     //$$ = "? super " + $3;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idreference_type_1 = reference_type.r GT {: 
formal_parameter = type.t variable_declarator_id                                        return  r.getFullyTypedName() + ">";
formal_parameter = type.t variable_declarator_id                                        //$$ = $1.getFullyTypedName() + ">";
formal_parameter = type.t variable_declarator_id :} | class_or_interface.c LT type_argument_list_2.t {:
formal_parameter = type.t variable_declarator_id     return  c.getFullyTypedName() + "<" +  t;
formal_parameter = type.t variable_declarator_id     //$$ = $1.getFullyTypedName() + "<" + $3;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idreference_type_2 = reference_type.r RSHIFT {: 
formal_parameter = type.t variable_declarator_id                                            return  r.getFullyTypedName() + ">>";
formal_parameter = type.t variable_declarator_id                                            //$$ = $1.getFullyTypedName() + ">>";
formal_parameter = type.t variable_declarator_id :} | class_or_interface.c LT type_argument_list_3.t {:
formal_parameter = type.t variable_declarator_id     return  c.getFullyTypedName() + "<" +  t;
formal_parameter = type.t variable_declarator_id     //$$ = $1.getFullyTypedName() + "<" + $3;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idreference_type_3 = reference_type.r URSHIFT {:
formal_parameter = type.t variable_declarator_id                                             return  r.getFullyTypedName() + ">>>";
formal_parameter = type.t variable_declarator_id                                             //$$ = $1.getFullyTypedName() + ">>>";
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_argument_list = type_argument.t {:
formal_parameter = type.t variable_declarator_id                                      return  t;
formal_parameter = type.t variable_declarator_id                                      //$$ = $1;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id | type_argument_list.l COMMA type_argument.a {:
formal_parameter = type.t variable_declarator_id     return  l + ", " +  a;
formal_parameter = type.t variable_declarator_id     //$$ = $1 + ", " + $3;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_argument_list_1 = type_argument_1
formal_parameter = type.t variable_declarator_id | type_argument_list.t_list COMMA type_argument_1.t1 {:
formal_parameter = type.t variable_declarator_id                                                       return t_list + ", " + t1;
formal_parameter = type.t variable_declarator_id                                                       //$$ = $1 + ", " + $3;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_argument_list_2 = type_argument_2
formal_parameter = type.t variable_declarator_id | type_argument_list.t_list COMMA type_argument_2.t2 {:
formal_parameter = type.t variable_declarator_id                                                       return t_list + ", " + t2;
formal_parameter = type.t variable_declarator_id                                                       //$$ = $1 + ", " + $3;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_argument_list_3 = type_argument_3
formal_parameter = type.t variable_declarator_id | type_argument_list.t_list COMMA type_argument_3.t3 {:
formal_parameter = type.t variable_declarator_id                                                       return t_list + ", " + t3;
formal_parameter = type.t variable_declarator_id                                                       //$$ = $1 + ", " + $3;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_argument = reference_type.r {:
formal_parameter = type.t variable_declarator_id                                  return r.getFullyTypedName();
formal_parameter = type.t variable_declarator_id                                  //$$ = $1.getFullyTypedName();
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id | wildcard
formal_parameter = type.t variable_declarator_id     ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_argument_1 = reference_type_1 | wildcard_1
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_argument_2 = reference_type_2 | wildcard_2
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_argument_3 = reference_type_3 | wildcard_3
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// List<Object>
formal_parameter = type.t variable_declarator_idmodifiers_opt = modifiers | modifiers_none
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// List<Object>
formal_parameter = type.t variable_declarator_idmodifiers = modifier.mod {:
formal_parameter = type.t variable_declarator_id                      ArrayList result = new ArrayList<Object>();
formal_parameter = type.t variable_declarator_id                      //$$ = new ArrayList<Object>();
formal_parameter = type.t variable_declarator_id                      return (List)result.add(mod);
formal_parameter = type.t variable_declarator_id                      //$<List>$.add($1);
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id | modifiers.mods modifier.mod {:
formal_parameter = type.t variable_declarator_id     mods.add(mod);
formal_parameter = type.t variable_declarator_id     //$1.add($2);
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// List<Object> -- This is just so we don't deal with null's.
formal_parameter = type.t variable_declarator_idmodifiers_none = {: $$ = new ArrayList<Object>(); :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// Object
formal_parameter = type.t variable_declarator_idmodifier = PUBLIC {:
formal_parameter = type.t variable_declarator_id                   return Modifier.PUBIC;
formal_parameter = type.t variable_declarator_id                   //$$ = Modifier.PUBLIC;
formal_parameter = type.t variable_declarator_id                   :}
formal_parameter = type.t variable_declarator_id    | PROTECTED {:
formal_parameter = type.t variable_declarator_id        return Modifier.PROTECTED;
formal_parameter = type.t variable_declarator_id        //$$ = Modifier.PROTECTED;
formal_parameter = type.t variable_declarator_id        :}
formal_parameter = type.t variable_declarator_id    | PRIVATE {:
formal_parameter = type.t variable_declarator_id        return Modifier.PRIVATE;
formal_parameter = type.t variable_declarator_id        //$$ = Modifier.PRIVATE;
formal_parameter = type.t variable_declarator_id        :}
formal_parameter = type.t variable_declarator_id    | STATIC {:
formal_parameter = type.t variable_declarator_id        return Modifier.STATIC;
formal_parameter = type.t variable_declarator_id        //$$ = Modifier.STATIC;
formal_parameter = type.t variable_declarator_id        :}
formal_parameter = type.t variable_declarator_id    | ABSTRACT {:
formal_parameter = type.t variable_declarator_id        return Modifier.ABSTRACT;
formal_parameter = type.t variable_declarator_id        //$$ = Modifier.ABSTRACT; :} 
formal_parameter = type.t variable_declarator_id    | FINAL {:
formal_parameter = type.t variable_declarator_id        return Modifier.FINAL;
formal_parameter = type.t variable_declarator_id        //$$ = Modifier.FINAL; :}
formal_parameter = type.t variable_declarator_id    | NATIVE {:
formal_parameter = type.t variable_declarator_id        return Modifier.NATIVE;
formal_parameter = type.t variable_declarator_id        //$$ = Modifier.NATIVE;
formal_parameter = type.t variable_declarator_id        :}
formal_parameter = type.t variable_declarator_id | SYNCHRONIZED {:
formal_parameter = type.t variable_declarator_id     return Modifier.SYNCHRONIZED;
formal_parameter = type.t variable_declarator_id     //$$ = Modifier.SYNCHRONIZED;
formal_parameter = type.t variable_declarator_id     :}
formal_parameter = type.t variable_declarator_id | TRANSIENT {:
formal_parameter = type.t variable_declarator_id     return Modifier.TRANSIENT;
formal_parameter = type.t variable_declarator_id     //$$ = Modifier.TRANSIENT;
formal_parameter = type.t variable_declarator_id     :}
formal_parameter = type.t variable_declarator_id | VOLATILE {:
formal_parameter = type.t variable_declarator_id     return Modifier.VOLATILE;
formal_parameter = type.t variable_declarator_id     //$$ = Modifier.VOLATILE;
formal_parameter = type.t variable_declarator_id    :}
formal_parameter = type.t variable_declarator_id | STRICTFP {:
formal_parameter = type.t variable_declarator_id             return Modifier.STRICTFP;
formal_parameter = type.t variable_declarator_id             //$$ = Modifier.STRICTFP;
formal_parameter = type.t variable_declarator_id     :}
formal_parameter = type.t variable_declarator_id | annotation.a {:
formal_parameter = type.t variable_declarator_id                 return a;
formal_parameter = type.t variable_declarator_id     //$$ = $1;
formal_parameter = type.t variable_declarator_id    :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idname = IDENTIFIER.id {:
formal_parameter = type.t variable_declarator_id                   return id;
formal_parameter = type.t variable_declarator_id                   //$$ = $1;
formal_parameter = type.t variable_declarator_id                   :}                  // Foo (or foo)
formal_parameter = type.t variable_declarator_id | name.n DOT IDENTIFIER.id {:
formal_parameter = type.t variable_declarator_id                             return n + ". " + id;
formal_parameter = type.t variable_declarator_id                             //$$ = $1 + "." + $3;
formal_parameter = type.t variable_declarator_id    :}  // foo.Foo 
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String -- we do not use this for any info
formal_parameter = type.t variable_declarator_iddims = LBRACK RBRACK {: 
formal_parameter = type.t variable_declarator_id                      return new ArrayTypeNode();
formal_parameter = type.t variable_declarator_id                      // $$ = new ArrayTypeNode();
formal_parameter = type.t variable_declarator_id :} | dims.d LBRACK RBRACK {: 
formal_parameter = type.t variable_declarator_id     return new ArrayTypeNode(d);
formal_parameter = type.t variable_declarator_id     //$$ = new ArrayTypeNode($1);
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// List<TypeNode>
formal_parameter = type.t variable_declarator_idthrows = THROWS class_type_list.c_list {:
formal_parameter = type.t variable_declarator_id                                        return c_list;
formal_parameter = type.t variable_declarator_id                                        //$$ = $2;
formal_parameter = type.t variable_declarator_id                                        :} 
formal_parameter = type.t variable_declarator_id | /* none */ {:
formal_parameter = type.t variable_declarator_id    return new ArrayList<TypeNode>();
formal_parameter = type.t variable_declarator_id    //$$ = new ArrayList<TypeNode>();
formal_parameter = type.t variable_declarator_id    :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// List<TypeNode>
formal_parameter = type.t variable_declarator_idclass_type_list = class_type.c {:
formal_parameter = type.t variable_declarator_id                                List val = new ArrayList<TypeNode>();
formal_parameter = type.t variable_declarator_id                                return (List)val.add(c);
formal_parameter = type.t variable_declarator_id                                //return val;
formal_parameter = type.t variable_declarator_id                                //$$ = new ArrayList<TypeNode>();
formal_parameter = type.t variable_declarator_id                                // $<List>$.add($1);
formal_parameter = type.t variable_declarator_id                               :}
formal_parameter = type.t variable_declarator_id               | class_type_list.l COMMA class_type.c {:
formal_parameter = type.t variable_declarator_id                                                        l.add(c);
formal_parameter = type.t variable_declarator_id                                                        // $<List>1.add($3);
formal_parameter = type.t variable_declarator_id                                                      :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// MethodSignatureNode
formal_parameter = type.t variable_declarator_idmethod_declarator = IDENTIFIER.id LPAREN formal_parameter_list_opt.l RPAREN {:
formal_parameter = type.t variable_declarator_id                                                                             return new MethodSignatureNode(id, l);
formal_parameter = type.t variable_declarator_id                                                                             //$$ = new MethodSignatureNode($1, $3);
formal_parameter = type.t variable_declarator_id                  :}
formal_parameter = type.t variable_declarator_id    ;

formal_parameter = type.t variable_declarator_id// List<ParameterNode>
formal_parameter = type.t variable_declarator_idformal_parameter_list_opt = formal_parameter_list 
formal_parameter = type.t variable_declarator_id    | /* none */ {:
formal_parameter = type.t variable_declarator_id                  return new ArrayList<ParameterNode>();
formal_parameter = type.t variable_declarator_id                  //$$ = new ArrayList<ParameterNode>();
formal_parameter = type.t variable_declarator_id                  :}
formal_parameter = type.t variable_declarator_id;
formal_parameter = type.t variable_declarator_id// List<ParameterNode>
formal_parameter = type.t variable_declarator_idformal_parameter_list = formal_parameter.f {:
formal_parameter = type.t variable_declarator_id                                          List<ParameterNode> list = new ArrayList<ParameterNode>();
formal_parameter = type.t variable_declarator_id                                          //list.add($1);
formal_parameter = type.t variable_declarator_id                                            list.add(f);
formal_parameter = type.t variable_declarator_id                                            //$$ = list;
formal_parameter = type.t variable_declarator_id                                            return list;
formal_parameter = type.t variable_declarator_id                                          :}
formal_parameter = type.t variable_declarator_id    | formal_parameter_list.f_list COMMA formal_parameter.f {:
formal_parameter = type.t variable_declarator_id                                                             f_list.add(f);
formal_parameter = type.t variable_declarator_id                                                             //$1.add($3);
formal_parameter = type.t variable_declarator_id                          :}
formal_parameter = type.t variable_declarator_id;
formal_parameter = type.t variable_declarator_id// ParameterNode
formal_parameter = type.t variable_declarator_id.v_id {:
formal_parameter = type.t variable_declarator_id                                                       return new ParameterNode(t, v_id);
formal_parameter = type.t variable_declarator_id                                                       //$$ = new ParameterNode($1, $2);
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id                 | type.t {:
formal_parameter = type.t variable_declarator_id                         return new ParameterNode(t, null);
formal_parameter = type.t variable_declarator_id                     //$$ = new ParameterNode($1, null);
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id                 | FINAL type.t variable_declarator_id.v_id {:
formal_parameter = type.t variable_declarator_id                     return new ParameterNode(t, v_id, true);
formal_parameter = type.t variable_declarator_id                     //$$ = new ParameterNode($2, $3, true);
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id                 | FINAL type.t {:
formal_parameter = type.t variable_declarator_id                     return new ParameterNode(t, null, true);
formal_parameter = type.t variable_declarator_id                     //$$ = new ParameterNode($2, null, true);
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id                 | type.t ELLIPSIS IDENTIFIER.id {:
formal_parameter = type.t variable_declarator_id                                             return new ParameterNode(t, id, false, true);
formal_parameter = type.t variable_declarator_id                                                  //$$ = new ParameterNode($1, $3, false, true);
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id                 | type.t ELLIPSIS {:
formal_parameter = type.t variable_declarator_id                                    return new ParameterNode(t, null, false, true);
formal_parameter = type.t variable_declarator_id                     //$$ = new ParameterNode($1, null, false, true);
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id                 | FINAL type.t ELLIPSIS IDENTIFIER.id {:
formal_parameter = type.t variable_declarator_id                     return new ParameterNode(t, id, true, true);
formal_parameter = type.t variable_declarator_id                     //$$ = new ParameterNode($2, $4, true, true);
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id                 | FINAL type.t ELLIPSIS {:
formal_parameter = type.t variable_declarator_id                                        return new ParameterNode(t, null, true, true);
formal_parameter = type.t variable_declarator_id                                        //$$ = new ParameterNode($2, null, true, true);
formal_parameter = type.t variable_declarator_id                                        :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idvariable_declarator_id = IDENTIFIER.id {:
formal_parameter = type.t variable_declarator_id                                        return id;
formal_parameter = type.t variable_declarator_id                                     //$$ = $1;
formal_parameter = type.t variable_declarator_id :} | variable_declarator_id.v LBRACK RBRACK {:
formal_parameter = type.t variable_declarator_id     // We know this is always preceeded by 'type' production.
formal_parameter = type.t variable_declarator_id     //how to accesss $0 in beaver
formal_parameter = type.t variable_declarator_id     //$<Object>0 = new ArrayTypeNode($<TypeNode>0); 
formal_parameter = type.t variable_declarator_id     return v;
formal_parameter = type.t variable_declarator_id     //$$ = $1;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_parameter_list = type_parameter_list.l COMMA type_parameter.p {:
formal_parameter = type.t variable_declarator_id                                                                    return l +", " + p;
formal_parameter = type.t variable_declarator_id                                                                //$$ = $1 + ", " + $3;
formal_parameter = type.t variable_declarator_id :} | type_parameter
formal_parameter = type.t variable_declarator_id     ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_parameter_list_1 = type_parameter_1
formal_parameter = type.t variable_declarator_id | type_parameter_list.l COMMA type_parameter_1.p1 {:
formal_parameter = type.t variable_declarator_id                                                    return l + ", " + p1;
formal_parameter = type.t variable_declarator_id                                                    //$$ = $1 + ", " + $3;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_parameter = type_variable.v type_bound_opt.b {:
formal_parameter = type.t variable_declarator_id                                                   return v + b;
formal_parameter = type.t variable_declarator_id                                                   //$$ = $1 + $2;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_parameter_1 = type_variable.t GT {: 
formal_parameter = type.t variable_declarator_id                                     return t + ">";
formal_parameter = type.t variable_declarator_id                                     //$$ = $1 + ">"; 
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id | type_variable.t type_bound_1.b {:
formal_parameter = type.t variable_declarator_id                                   return t + b;
formal_parameter = type.t variable_declarator_id                                   //$$ = $1 + $2;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_bound_1 = EXTENDS reference_type_1.r {: 
formal_parameter = type.t variable_declarator_id                                         return " extends " + r;
formal_parameter = type.t variable_declarator_id                                         //$$ = " extends " + $1;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id | EXTENDS reference_type.r additional_bound_list_1.a {: 
formal_parameter = type.t variable_declarator_id     return " extends " + r.getFullyTypedName() + a;
formal_parameter = type.t variable_declarator_id     //$$ = " extends " + $2.getFullyTypedName() + $3;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_bound_opt = type_bound 
formal_parameter = type.t variable_declarator_id | none {:
formal_parameter = type.t variable_declarator_id         return "";
formal_parameter = type.t variable_declarator_id         //$$ = "";
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idtype_bound = EXTENDS reference_type.r additional_bound_list_opt.a {: 
formal_parameter = type.t variable_declarator_id                                                               return "extends " + r.getFullyTypedName() + a;
formal_parameter = type.t variable_declarator_id                                                               //$$ = "extends " + $2.getFullyTypedName() + $3;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idadditional_bound_list_opt = additional_bound_list 
formal_parameter = type.t variable_declarator_id | none {:
formal_parameter = type.t variable_declarator_id         return "";
formal_parameter = type.t variable_declarator_id         //$$ = "";
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idadditional_bound_list = additional_bound.a additional_bound_list.b {:
formal_parameter = type.t variable_declarator_id                                                                return a + b;
formal_parameter = type.t variable_declarator_id                                                                //$$ = $1 + $2;
formal_parameter = type.t variable_declarator_id :} | additional_bound
formal_parameter = type.t variable_declarator_id     ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idadditional_bound_list_1 = additional_bound.a additional_bound_list_1.b {:
formal_parameter = type.t variable_declarator_id                                                                        return a + b;
formal_parameter = type.t variable_declarator_id                                                                        //$$ = $1 + $2;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id | AND reference_type_1.t {: 
formal_parameter = type.t variable_declarator_id     return " & " + t;
formal_parameter = type.t variable_declarator_id     //$$ = " & " + $1;
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idadditional_bound = AND interface_type.t {: 
formal_parameter = type.t variable_declarator_id                                       return " & " + t.getFullyTypedName();
formal_parameter = type.t variable_declarator_id                                       //$$ = " & " + $2.getFullyTypedName();
formal_parameter = type.t variable_declarator_id:}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id    none = {:
formal_parameter = type.t variable_declarator_id            return null;
formal_parameter = type.t variable_declarator_id            //$$ = null; :}
formal_parameter = type.t variable_declarator_id        ;
formal_parameter = type.t variable_declarator_id            constructor_declaration = modifiers_opt.m constructor_declarator.d throws.t {:
formal_parameter = type.t variable_declarator_id                                                                       //$$ = $2;
formal_parameter = type.t variable_declarator_id                                                                       ConstrcuctorSignatureNode result = d;
formal_parameter = type.t variable_declarator_id                                                                       //$<ConstructorSignatureNode>$.setModifiers($1);
formal_parameter = type.t variable_declarator_id                                                                       result.setModifiers(m);
formal_parameter = type.t variable_declarator_id                                                                       //$<ConstructorSignatureNode>$.setThrows($3);
formal_parameter = type.t variable_declarator_id                                                                       result.setThrows(t);
formal_parameter = type.t variable_declarator_id                                                                       return result;
formal_parameter = type.t variable_declarator_id :} | modifiers_opt.m LT type_parameter_list_1.l constructor_declarator.d throws.t {:
formal_parameter = type.t variable_declarator_id     //$$ = $4;
formal_parameter = type.t variable_declarator_id     ConstrcuctorSignatureNode result = d;
formal_parameter = type.t variable_declarator_id     //$<ConstructorSignatureNode>$.setModifiers($1);
formal_parameter = type.t variable_declarator_id     result.setModifiers(m);
formal_parameter = type.t variable_declarator_id     //$<ConstructorSignatureNode>$.setExtraTypeInfo("<" + $3);
formal_parameter = type.t variable_declarator_id     result.setExtraTypeInfo("<" + l);
formal_parameter = type.t variable_declarator_id     //$<ConstructorSignatureNode>$.setThrows($5);
formal_parameter = type.t variable_declarator_id     result.setThrows(t);
formal_parameter = type.t variable_declarator_id     return result;
formal_parameter = type.t variable_declarator_id     :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_idconstructor_declarator = name.n LPAREN formal_parameter_list_opt.p RPAREN {:
formal_parameter = type.t variable_declarator_id                                                                       return new ConstructorSignatureNode(n, p);
formal_parameter = type.t variable_declarator_id                                                                       //$$ = new ConstructorSignatureNode($1, $3);
formal_parameter = type.t variable_declarator_id :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_idmethod_header = modifiers_opt.m type.p method_declarator.d throws.t {:
formal_parameter = type.t variable_declarator_id                                                                     //$$ = $3;
formal_parameter = type.t variable_declarator_id                                                                     MethodSignatureNode result = d;
formal_parameter = type.t variable_declarator_id                                                                     //$<MethodSignatureNode>$.setModifiers($1);
formal_parameter = type.t variable_declarator_id                                                                     result.setModifiers(m);
formal_parameter = type.t variable_declarator_id                                                                     //$<MethodSignatureNode>$.setReturnType($2);
formal_parameter = type.t variable_declarator_id                                                                     result.setReturnType(p);
formal_parameter = type.t variable_declarator_id                                                                     //$<MethodSignatureNode>$.setThrows($4);
formal_parameter = type.t variable_declarator_id                                                             result.setThrows(t);
formal_parameter = type.t variable_declarator_id                                                             return result;
formal_parameter = type.t variable_declarator_id              :}
formal_parameter = type.t variable_declarator_id              | modifiers_opt.m LT type_parameter_list_1.l type.p method_declarator.d throws.t {:
formal_parameter = type.t variable_declarator_id                  //$$ = $5;
formal_parameter = type.t variable_declarator_id                  MethodSignatureNode result = d;
formal_parameter = type.t variable_declarator_id                  //$<MethodSignatureNode>$.setModifiers($1);
formal_parameter = type.t variable_declarator_id                  result.setModifiers(m);
formal_parameter = type.t variable_declarator_id                  //$<MethodSignatureNode>$.setExtraTypeInfo("<" + $3);
formal_parameter = type.t variable_declarator_id                  result.setExternalTypeInfo("<" + l);
formal_parameter = type.t variable_declarator_id                  //$<MethodSignatureNode>$.setReturnType($4);
formal_parameter = type.t variable_declarator_id                  result.setReturnType(p);
formal_parameter = type.t variable_declarator_id                  //$<MethodSignatureNode>$.setThrows($6);
formal_parameter = type.t variable_declarator_id                  result.setThrows(t);
formal_parameter = type.t variable_declarator_id                  return result;
formal_parameter = type.t variable_declarator_id              :}
formal_parameter = type.t variable_declarator_id              | modifiers_opt.m VOID method_declarator.d throws.t {:
formal_parameter = type.t variable_declarator_id                  //$$ = $3;
formal_parameter = type.t variable_declarator_id                  MethodSignatureNode result = d;
formal_parameter = type.t variable_declarator_id                  //$<MethodSignatureNode>$.setModifiers($1);
formal_parameter = type.t variable_declarator_id                  result.setModifiers(m);
formal_parameter = type.t variable_declarator_id                  //$<MethodSignatureNode>$.setReturnType(PrimitiveTypeNode.VOID);
formal_parameter = type.t variable_declarator_id                  result.setReturnType(PrimitiveTypeNode.VOID);
formal_parameter = type.t variable_declarator_id                  //$<MethodSignatureNode>$.setThrows($4);
formal_parameter = type.t variable_declarator_id                  result.setThrows(t);
formal_parameter = type.t variable_declarator_id                  return result;
formal_parameter = type.t variable_declarator_id              :}
formal_parameter = type.t variable_declarator_id              | modifiers_opt.m LT type_parameter_list_1.l VOID method_declarator.d throws.t {:
formal_parameter = type.t variable_declarator_id                                                                                            
formal_parameter = type.t variable_declarator_id                  MethodSignatureNode result = d;
formal_parameter = type.t variable_declarator_id                  //$$ = $5;
formal_parameter = type.t variable_declarator_id                  result.setModifiers(m);
formal_parameter = type.t variable_declarator_id                  //$<MethodSignatureNode>$.setModifiers($1);
formal_parameter = type.t variable_declarator_id                  result.setExtraTypeInfo("<" + l);
formal_parameter = type.t variable_declarator_id                  //$<MethodSignatureNode>$.setExtraTypeInfo("<" + $3);
formal_parameter = type.t variable_declarator_id                  result.setReturnType(PrimitiveTypeNode.VOID);
formal_parameter = type.t variable_declarator_id                  //$<MethodSignatureNode>$.setReturnType(PrimitiveTypeNode.VOID);
formal_parameter = type.t variable_declarator_id                  result.setThrows(t);
formal_parameter = type.t variable_declarator_id                  //$<MethodSignatureNode>$.setThrows($6);
formal_parameter = type.t variable_declarator_id                  return result();
formal_parameter = type.t variable_declarator_id               :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// Annotation
formal_parameter = type.t variable_declarator_idannotation = annotation_name.a {:
formal_parameter = type.t variable_declarator_id                              return new Annotation(a, new ArrayList<AnnotationParameter>());
formal_parameter = type.t variable_declarator_id                              //$$ = new Annotation($1, new ArrayList<AnnotationParameter>());
formal_parameter = type.t variable_declarator_id           :}
formal_parameter = type.t variable_declarator_id           | annotation_name.a LPAREN annotation_params_opt.p RPAREN {:
formal_parameter = type.t variable_declarator_id               return new Anntation(a,p);
formal_parameter = type.t variable_declarator_id               //$$ = new Annotation($1, $3);
formal_parameter = type.t variable_declarator_id           :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// String
formal_parameter = type.t variable_declarator_idannotation_name = AT.at name.n {:
formal_parameter = type.t variable_declarator_id                           //$$ = $1 + $2;
formal_parameter = type.t variable_declarator_id                                return (at + n);
formal_parameter = type.t variable_declarator_id                          :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// AnnotationParam
formal_parameter = type.t variable_declarator_idannotation_param = type_variable.t EQUAL annotation_value.a {:
formal_parameter = type.t variable_declarator_id                                                             return new AnnotationParameter(t,a);
formal_parameter = type.t variable_declarator_id                                                             //$$ = new AnnotationParameter($1, $3);
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id                 | annotation_value.a {:
formal_parameter = type.t variable_declarator_id                                       return new DefaultAnnotationParameter(a);
formal_parameter = type.t variable_declarator_id                                       // $$ = new DefaultAnnotationParameter($1);
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// List<AnnotationParameter>
formal_parameter = type.t variable_declarator_idannotation_params = annotation_param.p {:
formal_parameter = type.t variable_declarator_id                                      ArrayList result = new ArrayList<AnnotationParameter>();
formal_parameter = type.t variable_declarator_id                                      //$$ = new ArrayList<AnnotationParameter>();
formal_parameter = type.t variable_declarator_id                                      return (List)result.add(p);
formal_parameter = type.t variable_declarator_id                                      //$<List>$.add($1);
formal_parameter = type.t variable_declarator_id                  :}
formal_parameter = type.t variable_declarator_id                  | annotation_params.a COMMA annotation_param.p {:
formal_parameter = type.t variable_declarator_id                      a.add(p);
formal_parameter = type.t variable_declarator_id                      //$1.add($3);
formal_parameter = type.t variable_declarator_id                  :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// AnnotationExpression
formal_parameter = type.t variable_declarator_idannotation_value = annotation {:
formal_parameter = type.t variable_declarator_id                               return (AnnotationExpression)l;
formal_parameter = type.t variable_declarator_id                               //$$ = $<AnnotationExpression>1;
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id                 | type.t {:
formal_parameter = type.t variable_declarator_id                     return (AnnotationExpression)l;
formal_parameter = type.t variable_declarator_id                     //$$ = $<AnnotationExpression>1;
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id                 | literal.l {:
formal_parameter = type.t variable_declarator_id                    return (AnnotationExpression)l;
formal_parameter = type.t variable_declarator_id                     $$ = $<AnnotationExpression>1;
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id                 | LCURLY annotation_array_values.v RCURLY {:
formal_parameter = type.t variable_declarator_id                     return new ArrayAnnotationExpression(v);
formal_parameter = type.t variable_declarator_id                     // $$ = new ArrayAnnotationExpression($2);
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id                 | LCURLY RCURLY {:
formal_parameter = type.t variable_declarator_id                     return new ArrayAnnotationExpression(new ArrayList<AnnotationExpression>());
formal_parameter = type.t variable_declarator_id                     // $$ = new ArrayAnnotationExpression(new ArrayList<AnnotationExpression>());
formal_parameter = type.t variable_declarator_id                 :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// List<AnnotationExpression>
formal_parameter = type.t variable_declarator_idannotation_array_values = annotation_value.a {:
formal_parameter = type.t variable_declarator_id                                  ArrayList result = new ArrayList<AnnotationExpression>();
formal_parameter = type.t variable_declarator_id                                              //$$ = new ArrayList<AnnotationExpression>();
formal_parameter = type.t variable_declarator_id                                              return (List)result.add(a);
formal_parameter = type.t variable_declarator_id                                              //return result;
formal_parameter = type.t variable_declarator_id                                              //$<List>$.add($1);
formal_parameter = type.t variable_declarator_id                        :}
formal_parameter = type.t variable_declarator_id                        | annotation_array_values.a COMMA annotation_value.v {:
formal_parameter = type.t variable_declarator_id                            a.add(v);
formal_parameter = type.t variable_declarator_id                            //$1.add($3);
formal_parameter = type.t variable_declarator_id                        :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// List<AnnotationParameter> -- This is just so we don't deal with null's.
formal_parameter = type.t variable_declarator_idannotation_params_none = {: return new ArrayList<AnnotationParameter>();
formal_parameter = type.t variable_declarator_id                            //$$ = new ArrayList<AnnotationParameter>();
formal_parameter = type.t variable_declarator_id                         :}
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_id// List<AnnotationParameter>
formal_parameter = type.t variable_declarator_idannotation_params_opt = annotation_params | annotation_params_none
formal_parameter = type.t variable_declarator_id    ;
formal_parameter = type.t variable_declarator_idliteral = STRING_LITERAL.s {:
formal_parameter = type.t variable_declarator_id                          return new StringLiteral(s);
formal_parameter = type.t variable_declarator_id                          // $$ = new StringLiteral($1);
formal_parameter = type.t variable_declarator_id                          :}
formal_parameter = type.t variable_declarator_id        | CHARACTER_LITERAL.c {:
formal_parameter = type.t variable_declarator_id            return new CharacterLiteral(c);
formal_parameter = type.t variable_declarator_id            //$$ = new CharacterLiteral($1);
formal_parameter = type.t variable_declarator_id        :}

formal_parameter = type.t variable_declarator_id;









